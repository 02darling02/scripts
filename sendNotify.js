const e=require('./env');const querystring=require("querystring");const $=new e.Env();const timeout=15000;let SCKEY='';let BARK_PUSH='';let BARK_SOUND='';let TG_BOT_TOKEN='';let TG_USER_ID='';let TG_PROXY_HOST='';let TG_PROXY_PORT='';let TG_PROXY_AUTH='';let TG_API_HOST='api.telegram.org'let DD_BOT_TOKEN='';let DD_BOT_SECRET='';let QYWX_KEY='';let QYWX_AM='';let IGOT_PUSH_KEY='';let PUSH_PLUS_TOKEN='';let PUSH_PLUS_USER='';if(process.env.PUSH_KEY){SCKEY=process.env.PUSH_KEY}if(process.env.QQ_SKEY){QQ_SKEY=process.env.QQ_SKEY}if(process.env.QQ_MODE){QQ_MODE=process.env.QQ_MODE}if(process.env.BARK_PUSH){if(process.env.BARK_PUSH.indexOf('https')>-1||process.env.BARK_PUSH.indexOf('http')>-1){BARK_PUSH=process.env.BARK_PUSH}else{BARK_PUSH=`https:}if(process.env.BARK_SOUND){BARK_SOUND=process.env.BARK_SOUND}}else{if(BARK_PUSH&&BARK_PUSH.indexOf('https')===-1&&BARK_PUSH.indexOf('http')===-1){BARK_PUSH=`https:}}if(process.env.TG_BOT_TOKEN){TG_BOT_TOKEN=process.env.TG_BOT_TOKEN}if(process.env.TG_USER_ID){TG_USER_ID=process.env.TG_USER_ID}if(process.env.TG_PROXY_AUTH)TG_PROXY_AUTH=process.env.TG_PROXY_AUTH;if(process.env.TG_PROXY_HOST)TG_PROXY_HOST=process.env.TG_PROXY_HOST;if(process.env.TG_PROXY_PORT)TG_PROXY_PORT=process.env.TG_PROXY_PORT;if(process.env.TG_API_HOST)TG_API_HOST=process.env.TG_API_HOST;if(process.env.DD_BOT_TOKEN){DD_BOT_TOKEN=process.env.DD_BOT_TOKEN;if(process.env.DD_BOT_SECRET){DD_BOT_SECRET=process.env.DD_BOT_SECRET}}if(process.env.QYWX_KEY){QYWX_KEY=process.env.QYWX_KEY}if(process.env.QYWX_AM){QYWX_AM=process.env.QYWX_AM}if(process.env.IGOT_PUSH_KEY){IGOT_PUSH_KEY=process.env.IGOT_PUSH_KEY}if(process.env.PUSH_PLUS_TOKEN){PUSH_PLUS_TOKEN=process.env.PUSH_PLUS_TOKEN}if(process.env.PUSH_PLUS_USER){PUSH_PLUS_USER=process.env.PUSH_PLUS_USER}async function sendNotify(text,desp,params={},author='\n本项目免费使用：https://github.com/sudojia/sspanel_checkin'){desp+=author;await Promise.all([serverNotify(text,desp),pushPlusNotify(text,desp)])text=text.match(/.*?(?=\s?-)/g)?text.match(/.*?(?=\s?-)/g)[0]:text;await Promise.all([BarkNotify(text,desp,params),tgBotNotify(text,desp),ddBotNotify(text,desp),qywxBotNotify(text,desp),qywxamNotify(text,desp),iGotNotify(text,desp,params),])}function serverNotify(text,desp,time=2100){return new Promise(resolve=>{if(SCKEY){desp=desp.replace(/[\n\r]/g,'\n\n');const options={url:SCKEY.includes('SCT')?`https:body:`text=${text}&desp=${desp}`,headers:{'Content-Type':'application/x-www-form-urlencoded'},timeout}setTimeout(()=>{$.post(options,(err,resp,data)=>{try{if(err){console.log('发送通知调用API失败！！\n')console.log(err)}else{data=JSON.parse(data);if(data.errno===0||data.data.errno===0){console.log('server酱发送通知消息成功🎉\n')}else if(data.errno===1024){console.log(`server酱发送通知消息异常:${data.errmsg}\n`)}else{console.log(`server酱发送通知消息异常\n${JSON.stringify(data)}`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})},time)}else{console.log('\n\n您未提供server酱的SCKEY，取消微信推送消息通知🚫\n');resolve()}})}function CoolPush(text,desp){return new Promise(resolve=>{if(QQ_SKEY){let options={url:`https:headers:{'Content-Type':'application/json'}}switch(QQ_MODE){case"email":options.json={"t":text,"c":desp,};break;default:options.body=`${text}\n\n${desp}`}let pushMode=function(t){switch(t){case"send":return"个人";case"group":return"QQ群";case"wx":return"微信";case"ww":return"企业微信";case"email":return"邮件";default:return"未知方式"}}$.post(options,(err,resp,data)=>{try{if(err){console.log(`发送${pushMode(QQ_MODE)}通知调用API失败！！\n`)console.log(err)}else{data=JSON.parse(data);if(data.code===200){console.log(`酷推发送${pushMode(QQ_MODE)}通知消息成功🎉\n`)}else if(data.code===400){console.log(`QQ酷推(Cool Push)发送${pushMode(QQ_MODE)}推送失败：${data.msg}\n`)}else if(data.code===503){console.log(`QQ酷推出错，${data.message}：${data.data}\n`)}else{console.log(`酷推推送异常:${JSON.stringify(data)}`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else{console.log('您未提供酷推的SKEY，取消QQ推送消息通知🚫\n');resolve()}})}function BarkNotify(text,desp,params={}){return new Promise(resolve=>{if(BARK_PUSH){const options={url:`${BARK_PUSH}/${encodeURIComponent(text)}/${encodeURIComponent(desp)}?sound=${BARK_SOUND}&${querystring.stringify(params)}`,headers:{'Content-Type':'application/x-www-form-urlencoded'},timeout}$.get(options,(err,resp,data)=>{try{if(err){console.log('Bark APP发送通知调用API失败！！\n')console.log(err)}else{data=JSON.parse(data);if(data.code===200){console.log('Bark APP发送通知消息成功🎉\n')}else{console.log(`${data.message}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve()}})}else{console.log('您未提供Bark的APP推送BARK_PUSH，取消Bark推送消息通知🚫\n');resolve()}})}function tgBotNotify(text,desp){return new Promise(resolve=>{if(TG_BOT_TOKEN&&TG_USER_ID){const options={url:`https:body:`chat_id=${TG_USER_ID}&text=${text}\n\n${desp}&disable_web_page_preview=true`,headers:{'Content-Type':'application/x-www-form-urlencoded'},timeout}if(TG_PROXY_HOST&&TG_PROXY_PORT){const tunnel=require("tunnel");const agent={https:tunnel.httpsOverHttp({proxy:{host:TG_PROXY_HOST,port:TG_PROXY_PORT*1,proxyAuth:TG_PROXY_AUTH}})}Object.assign(options,{agent})}$.post(options,(err,resp,data)=>{try{if(err){console.log('telegram发送通知消息失败！！\n')console.log(err)}else{data=JSON.parse(data);if(data.ok){console.log('Telegram发送通知消息成功🎉。\n')}else if(data.error_code===400){console.log('请主动给bot发送一条消息并检查接收用户ID是否正确。\n')}else if(data.error_code===401){console.log('Telegram bot token 填写错误。\n')}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else{console.log('您未提供telegram机器人推送所需的TG_BOT_TOKEN和TG_USER_ID，取消telegram推送消息通知🚫\n');resolve()}})}function ddBotNotify(text,desp){return new Promise(resolve=>{const options={url:`https:json:{"msgtype":"text","text":{"content":`${text}\n\n${desp}`}},headers:{'Content-Type':'application/json'},timeout}if(DD_BOT_TOKEN&&DD_BOT_SECRET){const crypto=require('crypto');const dateNow=Date.now();const hmac=crypto.createHmac('sha256',DD_BOT_SECRET);hmac.update(`${dateNow}\n${DD_BOT_SECRET}`);const result=encodeURIComponent(hmac.digest('base64'));options.url=`${options.url}&timestamp=${dateNow}&sign=${result}`;$.post(options,(err,resp,data)=>{try{if(err){console.log('钉钉发送通知消息失败！！\n')console.log(err)}else{data=JSON.parse(data);if(data.errcode===0){console.log('钉钉发送通知消息成功🎉。\n')}else{console.log(`${data.errmsg}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else if(DD_BOT_TOKEN){$.post(options,(err,resp,data)=>{try{if(err){console.log('钉钉发送通知消息失败！！\n')console.log(err)}else{data=JSON.parse(data);if(data.errcode===0){console.log('钉钉发送通知消息完成。\n')}else{console.log(`${data.errmsg}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else{console.log('您未提供钉钉机器人推送所需的DD_BOT_TOKEN或者DD_BOT_SECRET，取消钉钉推送消息通知🚫\n');resolve()}})}function qywxBotNotify(text,desp){return new Promise(resolve=>{const options={url:`https:json:{msgtype:'text',text:{content:`${text}\n\n${desp}`,},},headers:{'Content-Type':'application/json',},timeout};if(QYWX_KEY){$.post(options,(err,resp,data)=>{try{if(err){console.log('企业微信发送通知消息失败！！\n');console.log(err)}else{data=JSON.parse(data);if(data.errcode===0){console.log('企业微信发送通知消息成功🎉。\n')}else{console.log(`${data.errmsg}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else{console.log('您未提供企业微信机器人推送所需的QYWX_KEY，取消企业微信推送消息通知🚫\n');resolve()}})}function ChangeUserId(desp){const QYWX_AM_AY=QYWX_AM.split(',');if(QYWX_AM_AY[2]){const userIdTmp=QYWX_AM_AY[2].split("|");let userId="";for(let i=0;i<userIdTmp.length;i++){const count="账号"+(i+1);const count2="签到号 "+(i+1);if(desp.match(count2)){userId=userIdTmp[i]}}if(!userId)userId=QYWX_AM_AY[2];return userId}else{return"@all"}}function qywxamNotify(text,desp){return new Promise(resolve=>{if(QYWX_AM){const QYWX_AM_AY=QYWX_AM.split(',');const options_accesstoken={url:`https:json:{corpid:`${QYWX_AM_AY[0]}`,corpsecret:`${QYWX_AM_AY[1]}`,},headers:{'Content-Type':'application/json',},timeout};$.post(options_accesstoken,(err,resp,data)=>{html=desp.replace(/\n/g,"<br/>")var json=JSON.parse(data);accesstoken=json.access_token;let options;switch(QYWX_AM_AY[4]){case'0':options={msgtype:'textcard',textcard:{title:`${text}`,description:`${desp}`,url:'',btntxt:'更多'}}break;case'1':options={msgtype:'text',text:{content:`${text}\n\n${desp}`}}break;default:options={msgtype:'mpnews',mpnews:{articles:[{title:`${text}`,thumb_media_id:`${QYWX_AM_AY[4]}`,author:`智能助手`,content_source_url:``,content:`${html}`,digest:`${desp}`}]}}};if(!QYWX_AM_AY[4]){options={msgtype:'text',text:{content:`${text}\n\n${desp}`}}}options={url:`https:json:{touser:`${ChangeUserId(desp)}`,agentid:`${QYWX_AM_AY[3]}`,safe:'0',...options},headers:{'Content-Type':'application/json',},}$.post(options,(err,resp,data)=>{try{if(err){console.log('成员ID:'+ChangeUserId(desp)+'企业微信应用消息发送通知消息失败！！\n');console.log(err)}else{data=JSON.parse(data);if(data.errcode===0){console.log('成员ID:'+ChangeUserId(desp)+'企业微信应用消息发送通知消息成功🎉。\n')}else{console.log(`${data.errmsg}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})})}else{console.log('您未提供企业微信应用消息推送所需的QYWX_AM，取消企业微信应用消息推送消息通知🚫\n');resolve()}})}function iGotNotify(text,desp,params={}){return new Promise(resolve=>{if(IGOT_PUSH_KEY){const IGOT_PUSH_KEY_REGX=new RegExp("^[a-zA-Z0-9]{24}$")if(!IGOT_PUSH_KEY_REGX.test(IGOT_PUSH_KEY)){console.log('您所提供的IGOT_PUSH_KEY无效\n')resolve()return}const options={url:`https:body:`title=${text}&content=${desp}&${querystring.stringify(params)}`,headers:{'Content-Type':'application/x-www-form-urlencoded'},timeout}$.post(options,(err,resp,data)=>{try{if(err){console.log('发送通知调用API失败！！\n')console.log(err)}else{if(typeof data==='string')data=JSON.parse(data);if(data.ret===0){console.log('iGot发送通知消息成功🎉\n')}else{console.log(`iGot发送通知消息失败：${data.errMsg}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else{console.log('您未提供iGot的推送IGOT_PUSH_KEY，取消iGot推送消息通知🚫\n');resolve()}})}function pushPlusNotify(text,desp){return new Promise(resolve=>{if(PUSH_PLUS_TOKEN){desp=desp.replace(/[\n\r]/g,'<br>');const body={token:`${PUSH_PLUS_TOKEN}`,title:`${text}`,content:`${desp}`,topic:`${PUSH_PLUS_USER}`};const options={url:`http:body:JSON.stringify(body),headers:{'Content-Type':' application/json'},timeout}$.post(options,(err,resp,data)=>{try{if(err){console.log(`push+发送${PUSH_PLUS_USER?'一对多':'一对一'}通知消息失败！！\n`)console.log(err)}else{data=JSON.parse(data);if(data.code===200){console.log(`push+发送${PUSH_PLUS_USER?'一对多':'一对一'}通知消息完成。\n`)}else{console.log(`push+发送${PUSH_PLUS_USER?'一对多':'一对一'}通知消息失败：${data.msg}\n`)}}}catch(e){$.logErr(e,resp)}finally{resolve(data)}})}else{console.log('您未提供push+推送所需的PUSH_PLUS_TOKEN，取消push+推送消息通知🚫\n');resolve()}})}module.exports={sendNotify,BARK_PUSH}
